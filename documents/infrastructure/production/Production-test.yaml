AWSTemplateFormatVersion: '2010-09-09'
Description: 'Production Infrastructure for NoteStrip Application'
Resources:
  ##########################################################################
  #                                                                        #
  #                               VPC                                      #
  #                                                                        #
  ##########################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/22'
      EnableDnsSupport: true      # Allows DNS resolution inside the VPC
      EnableDnsHostnames: true    # Assigns DNS hostnames to instances

  ##########################################################################
  #                                                                        #
  #                     Internet Gateway                                   #
  #                                                                        #
  ##########################################################################
  # Note: Internet Gateway allows public subnets (e.g., ALB) to send/receive traffic from the internet
  # Without an IGW, resources in the VPC cannot be accessed from or reach out to the internet.
  InternetGateway:                
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  # Connects the gateway to the VPC
  # Makes the Internet Gateway usable for that VPC.
  VPCGatewayAttachment:           
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ##########################################################################
  #                                                                        #
  #                     Subnets                                            #
  #                                                                        #
  ##########################################################################
  # An Application Load Balancer needs to span two public subnets for high-availability
  # Public subnet for an Application Load Balancer
  SubnetALB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      # GetAZs '' Returns a list of all AZs available in the region where you’re launching this stack.
      # Select picks one item from that list.
      AvailabilityZone: !Select [0, !GetAZs ''] 
      MapPublicIpOnLaunch: true    # Automatically assign public IPs to resources
      Tags:
        - Key: Name
          Value: SubnetALB1

  # Public subnet for an Application Load Balancer
  SubnetALB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true   # Automatically assign public IPs to resources
      Tags:
        - Key: Name
          Value: SubnetALB2
  
  # Private subnets for EC2s are in 10.0.2.0/24
  # Private subnet for an EC2
  PrivateSubnetApp1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/25' # first half of 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetApp1
  
  # Private subnet for an EC2
  PrivateSubnetApp2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.128/25' # second half of 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetApp2

  # For high availability, RDS can create a primary DB in one Availability Zone and a standby replica in another AZ.
  # Private subnets for RDSs are in 10.0.3.0/24
  # Private subnet for an RDS
  PrivateSubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/25' # first half of 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetDB1

  # Private subnet for an RDS
  PrivateSubnetDB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.128/25' # second half of 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetDB2

  ##########################################################################
  #                                                                        #
  #                     EIP                                                #
  #                                                                        #
  ##########################################################################
  # This EIP provides a static public IP that the NAT Gateway will use to send outbound traffic to the internet. 
  # Without it, instances in private subnets can’t reach the internet.
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc     # # Ensures the Elastic IP is created in the VPC domain (not EC2-Classic)

  ##########################################################################
  #                                                                        #
  #                     NAT Gateway                                        #
  #                                                                        #
  ##########################################################################
  # The NAT Gateway allows instances in private subnets to access the internet (e.g., to download updates or connect to AWS services) 
  # while keeping them unreachable from the public internet. It sits in a public subnet with a static Elastic IP and forwards outbound traffic from private subnets.
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId   # Links the NAT Gateway to the Elastic IP created above
      SubnetId: !Ref SubnetALB1                   # NAT Gateway must be in a public subnet; using SubnetALB1
      Tags:
        - Key: Name
          Value: NATGateway

  ##########################################################################
  #                                                                        #
  #                     Route Tables                                      #
  #                                                                        #
  ##########################################################################
  # This route table will be used by public subnets (ALB1, ALB2) to allow inbound and outbound internet traffic via the Internet Gateway.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC       # Attach this route table to the defined VPC.
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # This route table will be used by the private EC2 subnets (App1 and App2) to allow outbound internet access through the NAT Gateway.
  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateAppRouteTable
    
  ##########################################################################
  #                                                                        #
  #                     Route Rules                                        #
  #                                                                        #
  ##########################################################################
  # This default route allows resources in public subnets to send outbound traffic to the internet and receive inbound traffic.
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment     # Ensures IGW is attached before creating the route
    Properties:
      RouteTableId: !Ref PublicRouteTable   # Attaches to PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0   # All IPv4 traffic
      GatewayId: !Ref InternetGateway   # Sends traffic to Internet Gateway

  # This default route sends all outbound traffic from private EC2 instances to the NAT Gateway in the public subnet. This allows internet access for 
  # software updates, package installations, etc., while remaining private.
  PrivateAppDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable   # Attaches to PrivateAppRouteTable
      DestinationCidrBlock: 0.0.0.0/0    # All IPv4 traffic
      NatGatewayId: !Ref NatGateway      # Send traffic to NAT Gateway
  
  ##########################################################################
  #                                                                        #
  #                     Subnet Route Table Associations                    #
  #                                                                        #
  ##########################################################################
  # Associates the first public subnet (SubnetALB1) with the Public Route Table.
  PublicSubnetALB1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetALB1
      RouteTableId: !Ref PublicRouteTable
    
  # Associates the second public subnet (SubnetALB2) with the Public Route Table.
  PublicSubnetALB2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetALB2
      RouteTableId: !Ref PublicRouteTable

  # Associates the first private EC2 subnet (PrivateSubnetApp1) with the PrivateAppRouteTable.
  PrivateSubnetApp1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetApp1
        RouteTableId: !Ref PrivateAppRouteTable
    
  # Associates the second private EC2 subnet (PrivateSubnetApp2) with the PrivateAppRouteTable.
  PrivateSubnetApp2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp2
      RouteTableId: !Ref PrivateAppRouteTable

  ##########################################################################
  #                                                                        #
  #                     NACLs                                              #
  #                                                                        #
  ##########################################################################
  # Stateless firewall for public subnets (ALB1 and ALB2)
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicNACL
  
  # Stateless firewall for private EC2 subnets (App1 and App2)
  PrivateAppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateAppNACL

  # Stateless firewall for private RDS subnets (DB1 and DB2)
  PrivateDBNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateDBNACL
    
  ##########################################################################
  #                                                                        #
  #                     NACL Rules                                         #
  #                                                                        #
  ##########################################################################
  ##########################################################################
  #                     SubnetALBs rules                                   #
  ##########################################################################
  # Inbound HTTP (port 80)
  PublicNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6                    # 6 = TCP
      RuleAction: allow
      Egress: false                  # false = inbound; true = outbound
      CidrBlock: 0.0.0.0/0           # Allow from anywhere
      PortRange:
        From: 80
        To: 80

  # Inbound HTTPS (port 443)
  PublicNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Inbound Ephemeral Ports (for return traffic from clients)
  # Ephemeral ports are temporary, high-numbered TCP ports (usually 1024–65535) that your OS automatically assigns for return traffic in a client-server connection.
  # Without allowing ephemeral ports, return traffic gets blocked, even if you allow HTTP/HTTPS.
  PublicNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Outbound HTTP
  PublicNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Outbound HTTPS
  PublicNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Outbound Ephemeral Ports
  PublicNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  ##########################################################################
  #                     PrivateSubnetApp rules                             #
  ##########################################################################
  # Inbound traffic from ALB (HTTP)
  PrivateAppNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      # ALB is in public subnets, so allow traffic from those CIDR blocks
      CidrBlock: 10.0.0.0/23   # Covers SubnetALB1 (10.0.0.0/24) and SubnetALB2 (10.0.1.0/24)
      PortRange:
        From: 80
        To: 80

  # Inbound HTTPS from ALB
  PrivateAppNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 443
        To: 443

  # Inbound Ephemeral Ports for response traffic
  PrivateAppNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/22   # Allow responses from NAT and RDS within VPC; Basically the entire VPC
      PortRange:
        From: 1024
        To: 65535

  # Outbound HTTP to NAT Gateway (internet access)
  PrivateAppNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      # NAT Gateway is in public subnet 10.0.0.0/23
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 80
        To: 80

  # Outbound HTTPS to NAT Gateway
  PrivateAppNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 443
        To: 443

  # Outbound to RDS subnets (for DB connections)
  PrivateAppNACLOutboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.3.0/24  # Both DB subnets combined
      PortRange:
        From: 3306
        To: 3306

  # Outbound Ephemeral Ports for response traffic
  PrivateAppNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/22
      PortRange:
        From: 1024
        To: 65535

  ##########################################################################
  #                     PrivateSubnetDB rules                              #
  ##########################################################################
  # Inbound MySQL traffic from Private EC2 subnets
  PrivateDBNACLInboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      # Covers both PrivateSubnetApp1 and PrivateSubnetApp2
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  # Inbound Ephemeral Ports for return traffic
  PrivateDBNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 1024
        To: 65535

  # Outbound Ephemeral Ports for response traffic
  PrivateDBNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      # Allow responses to the App subnets
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 1024
        To: 65535

  # Outbound MySQL (if needed for replication/monitoring)
  PrivateDBNACLOutboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  ##########################################################################
  #                                                                        #
  #                     NACL Associations                                  #
  #                                                                        #
  ##########################################################################
  # Connects public subnet SubnetALB1 to PublicNACL nacl
  PublicNACLAssociationSubnetALB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetALB1
      NetworkAclId: !Ref PublicNACL

  # Connects public subnet SubnetALB2 to PublicNACL nacl
  PublicNACLAssociationSubnetALB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetALB2
      NetworkAclId: !Ref PublicNACL

  # Connects private subnet PrivateSubnetApp1 to PrivateAppNACL nacl
  PrivateAppNACLAssociationSubnetApp1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp1
      NetworkAclId: !Ref PrivateAppNACL

  # Connects private subnet PrivateSubnetApp2 to PrivateAppNACL nacl
  PrivateAppNACLAssociationSubnetApp2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp2
      NetworkAclId: !Ref PrivateAppNACL

  # Connects private subnet PrivateSubnetDB1 to PrivateDBNACL nacl
  PrivateDBNACLAssociationSubnetDB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetDB1
      NetworkAclId: !Ref PrivateDBNACL

  # Connects private subnet PrivateSubnetDB2 to PrivateDBNACL nacl
  PrivateDBNACLAssociationSubnetDB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetDB2
      NetworkAclId: !Ref PrivateDBNACL
    
  ##########################################################################
  #                                                                        #
  #                     Security Groups                                    #
  #                                                                        #
  ##########################################################################
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Allow inbound HTTPS
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Allow all outbound traffic (needed for ALB to talk to targets)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only ALB can talk to EC2 on HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only ALB can talk to EC2 on HTTPS
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0  # Allow all outbound traffic
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup  # Only EC2 can talk to RDS
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0  # Allow outbound if needed for monitoring/replication
      Tags:
        - Key: Name
          Value: RDSSecurityGroup

  ##########################################################################
  #                                                                        #
  #                     IAM Role, Policy, Instance Profile                 #
  #                                                                        #
  ##########################################################################
  # IAM Role for EC2
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NoteStripEC2Role
      AssumeRolePolicyDocument:   # This is the trust policy. It allows EC2 instances (the service ec2.amazonaws.com) to assume this role using sts:AssumeRole.
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # AWS managed policy for basic EC2 access to CloudWatch (logs, metrics)
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: NoteStripS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::notestrip-storage-bucket
                  - !Sub arn:aws:s3:::notestrip-storage-bucket/*

  # Instance Profile to attach Role to EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: NoteStripEC2InstanceProfile
      Roles:
        - !Ref EC2IAMRole
