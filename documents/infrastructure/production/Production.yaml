AWSTemplateFormatVersion: '2010-09-09'
Description: 'Production Infrastructure for NoteStrip Application'
Parameters:
  DBPassword:
    Type: String
    Description: "The master password for the NoteStrip RDS database"
    NoEcho: true                                # Hides the password in console and logs
    MinLength: 8                                # Optional security requirement
    MaxLength: 41
    AllowedPattern: "^[a-zA-Z0-9@#$%^&+=]*$"     # Allows common special characters
    ConstraintDescription: "Password must be 8–41 characters and cannot contain '/', '@', '\"', or spaces."
    
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  ##########################################################################
  #                                                                        #
  #                               VPC                                      #
  #                                                                        #
  ##########################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/22'
      EnableDnsSupport: true      # Allows DNS resolution inside the VPC
      EnableDnsHostnames: true    # Assigns DNS hostnames to instances

  ##########################################################################
  #                                                                        #
  #                     Internet Gateway                                   #
  #                                                                        #
  ##########################################################################
  # Note: Internet Gateway allows public subnets (e.g., ALB) to send/receive traffic from the internet
  # Without an IGW, resources in the VPC cannot be accessed from or reach out to the internet.
  InternetGateway:                
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  # Connects the gateway to the VPC
  # Makes the Internet Gateway usable for that VPC.
  VPCGatewayAttachment:           
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ##########################################################################
  #                                                                        #
  #                     Subnets                                            #
  #                                                                        #
  ##########################################################################
  # An Application Load Balancer needs to span two public subnets for high-availability
  # Public subnet for an Application Load Balancer
  SubnetALB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      # GetAZs '' Returns a list of all AZs available in the region where you’re launching this stack.
      # Select picks one item from that list.
      AvailabilityZone: !Select [0, !GetAZs ''] 
      MapPublicIpOnLaunch: true    # Automatically assign public IPs to resources
      Tags:
        - Key: Name
          Value: SubnetALB1

  # Public subnet for an Application Load Balancer
  SubnetALB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true   # Automatically assign public IPs to resources
      Tags:
        - Key: Name
          Value: SubnetALB2
  
  # Private subnets for EC2s are in 10.0.2.0/24
  # Private subnet for an EC2
  PrivateSubnetApp1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/25' # first half of 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetApp1
  
  # Private subnet for an EC2
  PrivateSubnetApp2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.128/25' # second half of 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetApp2

  # For high availability, RDS can create a primary DB in one Availability Zone and a standby replica in another AZ.
  # Private subnets for RDSs are in 10.0.3.0/24
  # Private subnet for an RDS
  PrivateSubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/25' # first half of 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetDB1

  # Private subnet for an RDS
  PrivateSubnetDB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.128/25' # second half of 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetDB2

  ##########################################################################
  #                                                                        #
  #                     EIP                                                #
  #                                                                        #
  ##########################################################################
  # This EIP provides a static public IP that the NAT Gateway will use to send outbound traffic to the internet. 
  # Without it, instances in private subnets can’t reach the internet.
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc     # # Ensures the Elastic IP is created in the VPC domain (not EC2-Classic)

  ##########################################################################
  #                                                                        #
  #                     NAT Gateway                                        #
  #                                                                        #
  ##########################################################################
  # The NAT Gateway allows instances in private subnets to access the internet (e.g., to download updates or connect to AWS services) 
  # while keeping them unreachable from the public internet. It sits in a public subnet with a static Elastic IP and forwards outbound traffic from private subnets.
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId   # Links the NAT Gateway to the Elastic IP created above
      SubnetId: !Ref SubnetALB1                   # NAT Gateway must be in a public subnet; using SubnetALB1
      Tags:
        - Key: Name
          Value: NATGateway

  ##########################################################################
  #                                                                        #
  #                     Route Tables                                      #
  #                                                                        #
  ##########################################################################
  # This route table will be used by public subnets (ALB1, ALB2) to allow inbound and outbound internet traffic via the Internet Gateway.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC       # Attach this route table to the defined VPC.
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # This route table will be used by the private EC2 subnets (App1 and App2) to allow outbound internet access through the NAT Gateway.
  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateAppRouteTable
    
  ##########################################################################
  #                                                                        #
  #                     Route Rules                                        #
  #                                                                        #
  ##########################################################################
  # This default route allows resources in public subnets to send outbound traffic to the internet and receive inbound traffic.
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment     # Ensures IGW is attached before creating the route
    Properties:
      RouteTableId: !Ref PublicRouteTable   # Attaches to PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0   # All IPv4 traffic
      GatewayId: !Ref InternetGateway   # Sends traffic to Internet Gateway

  # This default route sends all outbound traffic from private EC2 instances to the NAT Gateway in the public subnet. This allows internet access for 
  # software updates, package installations, etc., while remaining private.
  PrivateAppDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable   # Attaches to PrivateAppRouteTable
      DestinationCidrBlock: 0.0.0.0/0    # All IPv4 traffic
      NatGatewayId: !Ref NatGateway      # Send traffic to NAT Gateway
  
  ##########################################################################
  #                                                                        #
  #                     Subnet Route Table Associations                    #
  #                                                                        #
  ##########################################################################
  # Associates the first public subnet (SubnetALB1) with the Public Route Table.
  PublicSubnetALB1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetALB1
      RouteTableId: !Ref PublicRouteTable
    
  # Associates the second public subnet (SubnetALB2) with the Public Route Table.
  PublicSubnetALB2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetALB2
      RouteTableId: !Ref PublicRouteTable

  # Associates the first private EC2 subnet (PrivateSubnetApp1) with the PrivateAppRouteTable.
  PrivateSubnetApp1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetApp1
        RouteTableId: !Ref PrivateAppRouteTable
    
  # Associates the second private EC2 subnet (PrivateSubnetApp2) with the PrivateAppRouteTable.
  PrivateSubnetApp2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp2
      RouteTableId: !Ref PrivateAppRouteTable

  ##########################################################################
  #                                                                        #
  #                     NACLs                                              #
  #                                                                        #
  ##########################################################################
  # Stateless firewall for public subnets (ALB1 and ALB2)
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicNACL
  
  # Stateless firewall for private EC2 subnets (App1 and App2)
  PrivateAppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateAppNACL

  # Stateless firewall for private RDS subnets (DB1 and DB2)
  PrivateDBNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateDBNACL
    
  ##########################################################################
  #                                                                        #
  #                     NACL Rules                                         #
  #                                                                        #
  ##########################################################################
  ##########################################################################
  #                     SubnetALBs rules                                   #
  ##########################################################################
  # Inbound HTTP (port 80)
  PublicNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6                    # 6 = TCP
      RuleAction: allow
      Egress: false                  # false = inbound; true = outbound
      CidrBlock: 0.0.0.0/0           # Allow from anywhere
      PortRange:
        From: 80
        To: 80

  # Inbound HTTPS (port 443)
  PublicNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Inbound Ephemeral Ports (for return traffic from clients)
  # Ephemeral ports are temporary, high-numbered TCP ports (usually 1024–65535) that your OS automatically assigns for return traffic in a client-server connection.
  # Without allowing ephemeral ports, return traffic gets blocked, even if you allow HTTP/HTTPS.
  PublicNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Outbound HTTP
  PublicNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Outbound HTTPS
  PublicNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Outbound Ephemeral Ports
  PublicNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  ##########################################################################
  #                     PrivateSubnetApp rules                             #
  ##########################################################################
  # Inbound traffic from ALB (HTTP)
  PrivateAppNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      # ALB is in public subnets, so allow traffic from those CIDR blocks
      CidrBlock: 10.0.0.0/23   # Covers SubnetALB1 (10.0.0.0/24) and SubnetALB2 (10.0.1.0/24)
      PortRange:
        From: 80
        To: 80

  # Inbound HTTPS from ALB
  PrivateAppNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 443
        To: 443

  # Inbound Ephemeral Ports for response traffic
  PrivateAppNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/22   # Allow responses from NAT and RDS within VPC; Basically the entire VPC
      PortRange:
        From: 1024
        To: 65535

  # Outbound HTTP to NAT Gateway (internet access)
  PrivateAppNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      # NAT Gateway is in public subnet 10.0.0.0/23
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 80
        To: 80

  # Outbound HTTPS to NAT Gateway
  PrivateAppNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/23
      PortRange:
        From: 443
        To: 443

  # Outbound to RDS subnets (for DB connections)
  PrivateAppNACLOutboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.3.0/24  # Both DB subnets combined
      PortRange:
        From: 3306
        To: 3306

  # Outbound Ephemeral Ports for response traffic
  PrivateAppNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateAppNACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/22
      PortRange:
        From: 1024
        To: 65535

  ##########################################################################
  #                     PrivateSubnetDB rules                              #
  ##########################################################################
  # Inbound MySQL traffic from Private EC2 subnets
  PrivateDBNACLInboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      # Covers both PrivateSubnetApp1 and PrivateSubnetApp2
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  # Inbound Ephemeral Ports for return traffic
  PrivateDBNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 1024
        To: 65535

  # Outbound Ephemeral Ports for response traffic
  PrivateDBNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      # Allow responses to the App subnets
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 1024
        To: 65535

  # Outbound MySQL (if needed for replication/monitoring)
  PrivateDBNACLOutboundDB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  ##########################################################################
  #                                                                        #
  #                     NACL Associations                                  #
  #                                                                        #
  ##########################################################################
  # Connects public subnet SubnetALB1 to PublicNACL nacl
  PublicNACLAssociationSubnetALB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetALB1
      NetworkAclId: !Ref PublicNACL

  # Connects public subnet SubnetALB2 to PublicNACL nacl
  PublicNACLAssociationSubnetALB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetALB2
      NetworkAclId: !Ref PublicNACL

  # Connects private subnet PrivateSubnetApp1 to PrivateAppNACL nacl
  PrivateAppNACLAssociationSubnetApp1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp1
      NetworkAclId: !Ref PrivateAppNACL

  # Connects private subnet PrivateSubnetApp2 to PrivateAppNACL nacl
  PrivateAppNACLAssociationSubnetApp2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetApp2
      NetworkAclId: !Ref PrivateAppNACL

  # Connects private subnet PrivateSubnetDB1 to PrivateDBNACL nacl
  PrivateDBNACLAssociationSubnetDB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetDB1
      NetworkAclId: !Ref PrivateDBNACL

  # Connects private subnet PrivateSubnetDB2 to PrivateDBNACL nacl
  PrivateDBNACLAssociationSubnetDB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetDB2
      NetworkAclId: !Ref PrivateDBNACL
    
  ##########################################################################
  #                                                                        #
  #                     Security Groups                                    #
  #                                                                        #
  ##########################################################################
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Allow inbound HTTPS
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Allow all outbound traffic (needed for ALB to talk to targets)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only ALB can talk to EC2 on HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only ALB can talk to EC2 on HTTPS
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0  # Allow all outbound traffic
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup  # Only EC2 can talk to RDS
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0  # Allow outbound if needed for monitoring/replication
      Tags:
        - Key: Name
          Value: RDSSecurityGroup

  ##########################################################################
  #                                                                        #
  #                     IAM Role, Policy, Instance Profile                 #
  #                                                                        #
  ##########################################################################
  # IAM Role for EC2
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NoteStripEC2Role
      AssumeRolePolicyDocument:   # This is the trust policy. It allows EC2 instances (the service ec2.amazonaws.com) to assume this role using sts:AssumeRole.
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # AWS managed policy for basic EC2 access to CloudWatch (logs, metrics)
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        # Policy for PM2 to publish logs directly to CloudWatch
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: NoteStripS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::notestrip-storage-bucket
                  - !Sub arn:aws:s3:::notestrip-storage-bucket/*

  # Instance Profile to attach Role to EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: NoteStripEC2InstanceProfile
      Roles:
        - !Ref EC2IAMRole
  
  # IAM Policy for CloudWatch Logs  
  EC2CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NoteStripCloudWatchLogsPolicy
      Roles:
        - !Ref EC2IAMRole                   # Attach to EC2 IAM Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup         # Allow creating new log groups
              - logs:CreateLogStream        # Allow creating log streams
              - logs:PutLogEvents           # Allow pushing log events
            Resource: "*"

  ##########################################################################
  #                                                                        #
  #                     S3 Bucket                                          #
  #                                                                        #
  ##########################################################################
  # REMINDER: Make a stack for S3 Bucket alone and upload notestrip.zip file there first 
  # S3 Bucket for storing application files
  NoteStripS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: notestrip-storage-bucket  # Gives the bucket a fixed name (must be globally unique)
      AccessControl: Private                # Ensures default permissions are private (not publicly readable)
      PublicAccessBlockConfiguration:       # Blocks all public access to the bucket for extra security
        BlockPublicAcls: true                # Prevents adding new public ACLs
        BlockPublicPolicy: true              # Prevents bucket policies that would make data public
        IgnorePublicAcls: true               # Ignores any existing public ACLs
        RestrictPublicBuckets: true          # Restricts access if public policies are accidentally applied
      VersioningConfiguration:
        Status: Suspended                       # Disabled: Keeps multiple versions of objects (for recovery and history)
      BucketEncryption:
        ServerSideEncryptionConfiguration:   # Enforces encryption for all objects stored in the bucket
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256           # Uses AES-256 encryption for strong data security

  # Bucket policies for NoteStripS3Bucket
  # This means any entity assuming the EC2 role can access the bucket from anywhere, not just from inside the VPC.
  NoteStripS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NoteStripS3Bucket          # The bucket to which this policy will be attached
      PolicyDocument:
        Version: "2012-10-17"                 # Policy language version
        Statement:
          # Allow CloudWatch Logs to write exported logs
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${NoteStripS3Bucket}/AWSLogs/${AWS::AccountId}/*

  ##########################################################################
  #                                                                        #
  #                     RDS Database Instance                              #
  #                                                                        #
  ##########################################################################
  # RDS Instance
  NoteStripRDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete                                  # Skips snapshot on stack deletion
    Properties:
      DBInstanceIdentifier: notestrip-db                    # Logical DB name
      AllocatedStorage: 20                                   # Storage in GB
      DBInstanceClass: db.t3.micro                           # Small instance type for cost-efficiency
      Engine: mysql                                          # MySQL engine
      EngineVersion: "8.0.35"                                # Specific version for consistency
      MasterUsername: admin                                  # Admin user
      MasterUserPassword: !Ref DBPassword                    # Should be a secure parameter
      # You might think it makes two separate DB instances, but CloudFormation creates just one RDS.
      # Multi-AZ means AWS creates a single RDS cluster with a primary and a standby automatically spread across the two subnets in the DBSubnetGroup.
      MultiAZ: true                                          # Enables standby in 2nd AZ
      StorageEncrypted: true                                 # Encrypts data at rest
      BackupRetentionPeriod: 7                               # Automated backups for 7 days
      PubliclyAccessible: false                              # Keeps DB private
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup                              # Only EC2 can access
      DBSubnetGroupName: !Ref DBSubnetGroup                  # Ensures DB uses the private DB subnets; attached from DBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup            # Uses a DB Parameter group
      DeletionProtection: false                              
      Tags:
        - Key: Name
          Value: NoteStripRDSInstance

  # Subnet group of the RDS instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for NoteStrip RDS
      SubnetIds:
        - !Ref PrivateSubnetDB1
        - !Ref PrivateSubnetDB2
      Tags:
        - Key: Name
          Value: NoteStripDBSubnetGroup

  # Parameter group for the RDS instances
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "Parameter group for NoteStrip MySQL RDS"
      Family: "mysql8.0"                 # Must match your MySQL engine version
      Parameters:
        time_zone: "US/Central"          # Sets DB instance time zone
        event_scheduler: "ON"            # Enables scheduled events (e.g., from tables)
      Tags:
        - Key: Name
          Value: NoteStripDBParameterGroup

  ##########################################################################
  #                                                                        #
  #                     EC2 Launch Template                                #
  #                                                                        #
  ##########################################################################
  # A “blueprint” that describes how web server EC2 instances should look (OS image, instance type, security groups, startup script, disk size).
  NoteStripLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: NoteStripAppLaunchTemplate  
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3.micro           # Instance size/type (low-cost general purpose)
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn  # Links EC2 to IAM instance profile (for S3, CloudWatch access)    
        NetworkInterfaces:
          - AssociatePublicIpAddress: false   # Ensures instance gets no public IP (private subnet)
            DeviceIndex: 0                    # Primary network interface
            Groups:
              - !Ref EC2SecurityGroup         # Security group for controlling inbound/outbound traffic
        UserData: !Base64 |                   # Startup script that runs when instance launches
          #!/bin/bash
          set -e

          yum update -y

          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs unzip nginx aws-cli
        BlockDeviceMappings:
          - DeviceName: /dev/xvda             # Root volume device name
            Ebs:
              VolumeSize: 20                  # Disk size (20 GB)
              VolumeType: gp3                 # General-purpose SSD
              DeleteOnTermination: true       # Deletes volume when instance is terminated
        TagSpecifications:
          - ResourceType: instance            # Applies tags to EC2 instances launched
            Tags:
              - Key: Name
                Value: NoteStripAppServer      # Name tag for easy identification

  ##########################################################################
  #                                                                        #
  #                     Target Group for ALB                               #
  #                                                                        #
  ##########################################################################
  # A group that keeps track of which EC2 instances can receive traffic. It checks their health (are they alive and responding?).
  NoteStripTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: NoteStripAppTargetGroup                   # Name for identifying this target group
      Protocol: HTTP                                  # Protocol the ALB uses to communicate with EC2
      Port: 80                                        # Port where your EC2 instances listen (HTTP)
      TargetType: instance                            # Targets are EC2 instances (not IPs or Lambda)
      VpcId: !Ref VPC                                 # VPC where your EC2 instances and ALB exist
      HealthCheckProtocol: HTTP                       # Protocol for health checks
      HealthCheckPort: traffic-port                   # Uses the same port as the target group (80)
      HealthCheckPath: /                              # ALB will check this path for instance health
      HealthCheckIntervalSeconds: 30                  # Interval between health checks (default: 30s)
      HealthCheckTimeoutSeconds: 5                    # Time to wait for a response before marking unhealthy
      HealthyThresholdCount: 3                        # Number of consecutive successful checks to mark healthy
      UnhealthyThresholdCount: 2                      # Number of consecutive failed checks to mark unhealthy
      Matcher:                                        # Response code matcher for health checks
        HttpCode: 200-399                             # Consider 2xx and 3xx as healthy
      Tags:
        - Key: Name
          Value: NoteStripTargetGroup                 # Tag for easier identification

  ##########################################################################
  #                                                                        #
  #                     Auto Scaling Group (ASG)                           #
  #                                                                        #
  ##########################################################################
  # ASG requires a launch template and knows which Target Group(s) to attach instances to.
  # Registers these EC2 instances in the Target Group, so they start receiving traffic automatically.
  NoteStripAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: NoteStripAppASG               # Name of the ASG for identification
      VPCZoneIdentifier:                                 # Subnets where EC2 instances will be launched
        - !Ref PrivateSubnetApp1                         # First private subnet
        - !Ref PrivateSubnetApp2                         # Second private subnet for HA
      LaunchTemplate:                                    # Reference to the previously defined Launch Template
        LaunchTemplateId: !Ref NoteStripLaunchTemplate   # ID of the launch template
        Version: !GetAtt NoteStripLaunchTemplate.LatestVersionNumber # Ensures it uses the latest template version
      MinSize: 1                                         # Minimum number of running EC2 instances
      MaxSize: 2                                         # Maximum number of running EC2 instances
      DesiredCapacity: 1                                 # Target number of running instances at launch
      TargetGroupARNs:                                   # ALB Target Groups to register instances
        - !Ref NoteStripTargetGroup                      # Associates ASG with the HTTP target group
      HealthCheckType: ELB                               # Health checks based on ELB instance status
      HealthCheckGracePeriod: 60                         # Seconds to wait before checking instance health
      MetricsCollection:                                 # Enables monitoring for scaling decisions
        - Granularity: "1Minute"                         # Collect metrics every minute
      Tags:                                              # Tags applied to all instances launched by ASG
        - Key: Name
          Value: NoteStripAppServer
          PropagateAtLaunch: true                        # Ensures the tag is applied to new instances

  ##########################################################################
  #                                                                        #
  #                     Application Load Balancer (ALB)                    #
  #                                                                        #
  ##########################################################################
  # A single public endpoint (internet-facing) that receives HTTP requests from users.
  # ALB can only forward traffic to an existing Target Group
  # Uses the Target Group to forward incoming requests to healthy EC2 servers running in the private subnets.
  NoteStripALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: NoteStripAppALB                               # Name of the ALB for identification
      Type: application                                   # Specifies it’s an Application Load Balancer
      Scheme: internet-facing                             # Accessible from the internet (public-facing)
      IpAddressType: ipv4                                 # Uses IPv4 addressing
      Subnets:                                            # ALB must span at least 2 public subnets
        - !Ref SubnetALB1
        - !Ref SubnetALB2
      SecurityGroups:                                     # Security group controlling inbound/outbound traffic
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:                             # Configures additional ALB settings
        - Key: idle_timeout.timeout_seconds
          Value: "60"                                     # Time (seconds) before closing idle connections
        - Key: deletion_protection.enabled
          Value: "false"                                  # Prevent accidental deletion (disabled here)
      Tags:
        - Key: Name
          Value: NoteStripALB                             # Tag for easier identification

  ##########################################################################
  #                                                                        #
  #                     ALB Listener (HTTP)                                #
  #                                                                        #
  ##########################################################################
  # A rule inside the ALB that listens on port 80 for HTTP traffic.
  # For every request coming in, it forwards it to the Target Group, which then sends it to one of the EC2 instances.
  NoteStripALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NoteStripALB                     # The ALB this listener is attached to
      Port: 80                                               # Listens for HTTP traffic on port 80
      Protocol: HTTP                                         # Protocol for this listener
      DefaultActions:                                        # What to do with requests that don’t match any rule
        - Type: forward                                      # Forward traffic to a target group
          TargetGroupArn: !Ref NoteStripTargetGroup           # The target group to forward to

  # Flow Summary
  # User hits ALB → Listener receives HTTP request → ALB checks Target Group for healthy EC2 → Sends traffic to one of the EC2 servers →
  # Auto Scaling Group manages adding/removing EC2 servers using the Launch Template → Every new EC2 is automatically put into the Target Group.

  ##########################################################################
  #                                                                        #
  #                     CloudWatch Log Group                               #
  #                                                                        #
  ##########################################################################
  NoteStripLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /notestrip/app/logs     # Log group name
      RetentionInDays: 14                   # Keep logs for 14 days