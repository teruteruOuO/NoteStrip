AWSTemplateFormatVersion: '2010-09-09'
Description: 'Production Infrastructure for NoteStrip Application'
Resources:
  ## One VPC for the application
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/22'
      EnableDnsSupport: true      # Allows DNS resolution inside the VPC
      EnableDnsHostnames: true    # Assigns DNS hostnames to instances
  
  
  ## Internet Gateway 
  # Note: Internet Gateway allows public subnets (e.g., ALB) to send/receive traffic from the internet
  # Internet Gateway creation
  InternetGateway:                
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  # Connects the gateway to the VPC
  VPCGatewayAttachment:           
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
 

  ## Subnets
  # ALBs' subnet
  SubnetALB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true # Whether to auto-assign public IPs to instances launched in this subnet (set to true for public subnets like for ALB).
      Tags:
        - Key: Name
          Value: SubnetALB
  
  # EC2s' subnet
  SubnetEC2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SubnetEC2
  
  # RDSs' subnet
  SubnetRDS:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SubnetRDS

  # Add second private subnet in a different Availability Zone
  SubnetRDS2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SubnetRDS2

  
  
  ## Elastic IPs
  # Allocates a static public IPv4 address in the VPC.
  # Required because the NAT Gateway needs a public IP to send traffic to the internet. 
  # Even though the NAT Gateway is in a public subnet, it needs this Elastic IP to function.
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  

  ## NAT Gateway
  # Creates a NAT Gateway in SubnetALB, which is the public subnet.
  # NAT Gateway only allows outbound traffic from private subnets; it doesn't allow inbound connections, which keeps the EC2s private.
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId  # Uses the Elastic IP from NatEIP so it can send requests out to the internet
      SubnetId: !Ref SubnetALB
      Tags:
        - Key: Name
          Value: NATGateway


  ## Route Tables
  # Creates a public route table 
  RouteTablePublic: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC # Attach this route table to the defined VPC.
      Tags:
        - Key: Name
          Value: RouteTablePublic

  # Creates a dedicated route table for the private subnet (SubnetEC2).
  # This route table will have a route to the NAT Gateway, not the Internet Gateway.
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RouteTablePrivate


  ## Route Rules
  # Defines a route rule inside RouteTablePublic.
  PublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment # Ensures the route is only created after the internet gateway is successfully attached to the VPC.
    Properties:
      RouteTableId: !Ref RouteTablePublic # Specifies that this route rule belongs to the RouteTablePublic.
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway # This sets the target for internet-bound traffic to go through the Internet Gateway defined earlier.

  # Adds a rule to the RouteTablePrivate that sends all internet-bound traffic (0.0.0.0/0) to the NAT Gateway.
  # This is what allows EC2 instances in SubnetEC2 to reach out to the internet securely (e.g., download software updates, connect to APIs).
  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  
  ## Subnet Route Table Associations
  # Associates a subnet with the route table so the subnet will use that routing logic.
  SubnetRouteTableAssociationALB: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetALB # The ALB subnet made public by associating it with the public route table.
      RouteTableId: !Ref RouteTablePublic # Links the SubnetALB to the PublicRouteTable, which routes internet traffic through the IGW.

  # Connects the EC2 subnet (SubnetEC2) to the private route table.
  # This ensures that instances in this subnet use the NAT Gateway (and not the Internet Gateway) for internet-bound traffic.
  SubnetRouteTableAssociationEC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetEC2
      RouteTableId: !Ref RouteTablePrivate
  # Note: SubnetEC2 and SubnetRDS are already inside the same VPC, so there's no need to explicitly add route rules between them


  ## Network Access Control Lists
  # NACL for SubnetALB
  NACLSubnetALB:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NACLSubnetALB

  # NACL for SubnetEC2
  NACLSubnetEC2:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NACLSubnetEC2

  # NACL for SubnetRDS
  NACLSubnetRDS:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NACLSubnetRDS


  ## Network Access Control List Rules
  # SubnetALB: Allows inbound traffic on port 80 (HTTP).
  NACLSubnetALBInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetALB
      RuleNumber: 100 # rules are processed in order; lowest number first.
      Protocol: 6  # Protocol: 6 → means TCP.
      RuleAction: allow
      Egress: false # false means this is for incoming packets.
      CidrBlock: 0.0.0.0/0 # allows from any IP address on the internet.
      PortRange:
        From: 80
        To: 80

  # SubnetALB: Allows inbound traffic on port 443 (HTTPS).
  NACLSubnetALBInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetALB
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # SubnetALB: Allow All Outbound Traffic
  NACLSubnetALBOutboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetALB
      RuleNumber: 100
      Protocol: -1  # Protocol: -1 means all protocols (TCP, UDP, ICMP, etc.).
      RuleAction: allow
      Egress: true # Egress: true → means this is for outbound packets.
      CidrBlock: 0.0.0.0/0

  # SubnetEC2: Inbound from SubnetALB on port 80 (HTTP)
  NACLSubnetEC2InboundFromALB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/24
      PortRange:
        From: 80
        To: 80

  # SubnetEC2: Inbound HTTPS (443) from SubnetALB
  NACLSubnetEC2InboundFromALBHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 105  # Make sure it's unique and ordered correctly
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/24 
      PortRange:
        From: 443
        To: 443

  # SubnetEC2: Inbound from SubnetRDS on port 3306 (MySQL)
  NACLSubnetEC2InboundFromRDS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  # SubnetEC2: Outbound to SubnetALB on port 80 (HTTP)
  NACLSubnetEC2OutboundToALB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/24
      PortRange:
        From: 80
        To: 80

  # SubnetEC2: Outbound HTTPS back to SubnetALB
  NACLSubnetEC2OutboundToALBHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 105  # Same number as above for logical pairing
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.0.0/24  
      PortRange:
        From: 443
        To: 443

  # SubnetEC2: Outbound to SubnetRDS on port 3306 (MySQL)
  NACLSubnetEC2OutboundToRDS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetEC2
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 3306
        To: 3306

  # SubnetRDS: inbound MySQL (3306) from SubnetEC2
  NACLSubnetRDSInboundFromEC2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetRDS
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.1.0/24  # SubnetEC2
      PortRange:
        From: 3306
        To: 3306

  # SubnetRDS: Allow outbound MySQL response to SubnetEC2
  NACLSubnetRDSOutboundToEC2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLSubnetRDS
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 10.0.1.0/24  # SubnetEC2
      PortRange:
        From: 3306
        To: 3306


  ## Subnet NACL Associations
  # Associate NACLSubnetALB with SubnetALB
  SubnetALBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetALB
      NetworkAclId: !Ref NACLSubnetALB

  # Associate NACLSubnetEC2 with SubnetEC2
  SubnetEC2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetEC2
      NetworkAclId: !Ref NACLSubnetEC2

  # Associate NACLSubnetRDS with SubnetRDS
  SubnetRDSNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetRDS
      NetworkAclId: !Ref NACLSubnetRDS

  # Add a Network ACL for the second RDS subnet
  # Shares the same NetworkAclId as SubnetRDSNACLAssociation
  SubnetRDS2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetRDS2
      NetworkAclId: !Ref NACLSubnetRDS


  ## Security Groups
  ## ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0   # Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0   # Allow HTTPS from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0   # Allow all outbound traffic (standard for ALB)
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SecurityGroup
      GroupDescription: Allow HTTP, HTTPS, and SSH access for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress: # Inbound rules (e.g., HTTP, HTTPS, SSH).
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from anywhere — tighten for production use
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # HTTPS from anywhere
      SecurityGroupEgress: # Outbound rules (default is allow-all)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0  # Allow all outbound traffic
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RDSSecurityGroup
      GroupDescription: Allow MySQL access from EC2 subnet only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.1.0/24  # SubnetEC2's CIDR block
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0  # Allow all outbound traffic (optional; usually default)
      Tags:
        - Key: Name
          Value: RDSSecurityGroup


  ## IAM Role and Policies
  # EC2 Instance IAM Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument: # This is the trust policy. It allows EC2 instances (the service ec2.amazonaws.com) to assume this role using sts:AssumeRole.
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies: # Names the policy and begins defining its actions.
        - PolicyName: EC2AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow # Allows EC2 to read from, write to, and list contents of any S3 bucket.
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: "*"
              - Effect: Allow # Allows EC2 to send logs to CloudWatch (e.g., from your app or cloud-init logs).
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow # Grants permissions for the SSM agent to communicate with AWS. Enables Session Manager, Run Command, and other management features—without requiring SSH access.
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:GetCommandInvocation
                  - ssm:SendCommand
                  - ssm:StartSession
                  - ssm:TerminateSession
                  - ec2messages:*
                  - ssmmessages:*
                Resource: "*"
              - Effect: Allow # Optional: Lets EC2 connect to RDS instances that use IAM-based database authentication.
                Action: 
                  - rds-db:connect
                Resource: "*"


  ## IAM Instance Profile
  # Creates an Instance Profile, which is how an IAM Role is attached to an EC2 instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: # This associates the role created (EC2InstanceRole) with the instance profile.
      InstanceProfileName: EC2InstanceProfile 
      Roles:
        - !Ref EC2InstanceRole
  # Note: Attach !Ref EC2InstanceProfile to EC2 resource under IamInstanceProfile.


  ## S3
  # Creates a Gateway VPC Endpoint for S3.
  # Ensures S3 traffic stays within the AWS network (private), instead of traversing the public internet.
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      RouteTableIds: # Connected to RouteTablePrivate so EC2 instances in SubnetEC2 can access S3 through this endpoint.
        - !Ref RouteTablePrivate
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: S3VPCEndpoint

  # Creates an S3 bucket named notestrip-storage-bucket.
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: notestrip-storage-bucket
      Tags:
        - Key: Name
          Value: NoteStripStorageBucket

  # Restricts access to the S3 bucket.
  # Result: Even if credentials are leaked, access is denied unless the call comes from within your VPC through the approved VPC Endpoint.
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAccessOnlyFromVPCSubnetEC2ViaVPCE
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}"
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Condition:
              StringNotEquals:
                aws:SourceVpce: !Ref S3VPCEndpoint
              ArnNotEquals:
                aws:PrincipalArn:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/admin"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:root"


  ## RDS
  # RDS Parameter Group (enables time zone + event scheduler)
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: RDS parameter group with scheduling and timezone for Texas
      Family: mysql8.0
      Parameters:
        time_zone: "US/Central"
        event_scheduler: "ON"
      Tags:
        - Key: Name
          Value: RDSParameterGroup

  # RDS Subnet Group (required for VPC placement)
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS inside private subnets
      SubnetIds:
        - !Ref SubnetRDS
        - !Ref SubnetRDS2
      DBSubnetGroupName: rds-subnet-group
      Tags:
        - Key: Name
          Value: RDSSubnetGroup

  # RDS Instance
  MySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: notestrip-db
      Engine: mysql
      EngineVersion: 8.0.35
      DBInstanceClass: db.t3.micro  # free tier eligible or small test size
      AllocatedStorage: 20
      MaxAllocatedStorage: 100
      DBName: NoteStripDB
      MasterUsername: admin
      MasterUserPassword: somethingsomethingpassword123  # Consider using Secrets Manager instead
      PubliclyAccessible: false  # Keep private
      MultiAZ: false             # Set true for HA in production
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBParameterGroupName: !Ref RDSParameterGroup
      BackupRetentionPeriod: 7  # Keep backups for 7 days
      DeletionProtection: false # true in production
      StorageType: gp2
      Tags:
        - Key: Name
          Value: NoteStripDatabase
